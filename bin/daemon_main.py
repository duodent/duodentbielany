import time
import signal
import logging
import threading
from daemon_heart import Daemon
from daemon_funk import handle_visit_request, remind_reception, schedule_visit_reminders
import mysqlDB as msq

# ðŸ”¹ Konfiguracja logowania
DEBUG = True
log_level = logging.DEBUG if DEBUG else logging.INFO
logging.basicConfig(level=log_level, format="%(asctime)s - %(message)s", datefmt="%H:%M:%S")

# Inicjalizacja daemona
daemon = Daemon()

# Symulowana baza zgÅ‚oszeÅ„ (zakomentuj i odkomentuj pobieranie z MySQL w monitor_database)
# visit_requests = [
#     {"id": 1, "name": "Jan Kowalski", "email": "informatyk@dmdbudownictwo.pl", "status": "in_progress", "in_progress_date": None, "in_progress_flag": 0, "reminder_count": 0},
#     {"id": 2, "name": "Anna Nowak", "email": "heretykboga@gmail.com", "status": "in_progress", "in_progress_date": None, "in_progress_flag": 1, "reminder_count": 0},
# ]

# **NOWE: Funkcja cyklicznie sprawdzajÄ…ca bazÄ™ i aktualizujÄ…ca zadania**
def monitor_database():
    """ Demon sprawdza bazÄ™ i wykrywa nowe wizyty do obsÅ‚ugi """
    logging.info("ðŸ”„ Sprawdzanie bazy pod kÄ…tem nowych zgÅ‚oszeÅ„...")

    # ðŸ”¹ Pobieramy tylko potwierdzone wizyty, ktÃ³re nie majÄ… jeszcze przypomnieÅ„
    visit_requests = msq.safe_connect_to_database(
        "SELECT id, name, email, confirmed_date FROM visit_requests WHERE status = 'confirmed' AND confirmed_flag = 0"
    )

    for visit in visit_requests:
        visit_dict = {
            "id": visit[0],
            "name": visit[1],
            "email": visit[2],
            "confirmed_date": visit[3]
        }

        # ðŸ”¹ Planowanie przypomnieÅ„
        schedule_visit_reminders(visit_dict, daemon)

        # ðŸ”¹ Oznaczamy w bazie, Å¼e przypomnienia sÄ… juÅ¼ zaplanowane
        msq.safe_connect_to_database(
            "UPDATE visit_requests SET confirmed_flag = 1 WHERE id = %s", (visit[0],)
        )

    # ðŸ”„ Demon sprawdza bazÄ™ co 30 sekund
    daemon.add_task(30, monitor_database)

# **Dodajemy pierwsze wywoÅ‚anie monitorowania**
daemon.add_task(1, monitor_database)

# **ObsÅ‚uga CTRL+C**
def stop_daemon(sig, frame):
    logging.info("ðŸ›‘ Otrzymano sygnaÅ‚ zatrzymania! Zamykamy daemon...")
    daemon.stop()
    daemon_thread.join()
    logging.info("âœ… Daemon zostaÅ‚ bezpiecznie zatrzymany!")

signal.signal(signal.SIGINT, stop_daemon)

# Uruchamiamy daemona
daemon_thread = threading.Thread(target=daemon.run)
daemon_thread.start()

# GÅ‚Ã³wna pÄ™tla programu â€“ teraz moÅ¼emy zatrzymaÄ‡ `CTRL+C`
while daemon.running:
    time.sleep(1)
